{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCMA,IAAM,EAAQ,SAAS,aAAa,CAAC,UAC/B,EAAe,SAAS,aAAa,CAAC,eACtC,EAAe,SAAS,aAAa,CAAC,eACtC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAe,SAAS,aAAa,CAAC,kBAkB5C,SAAS,EAAe,CAAI,CAAE,CAAI,CAAE,CAAG,CAAE,CAAG,EAC1C,IAAM,EAAY,EAAK,SAAS,CAE5B,CAAA,EAAU,QAAQ,CAAC,eAAiB,EAAU,QAAQ,CAAC,gBAA3D,IACM,GAAQ,EACV,EAAK,YAAY,CAAC,WAAY,CAAA,GAE9B,EAAK,eAAe,CAAC,aAIrB,CAAA,EAAU,QAAQ,CAAC,eAAiB,EAAU,QAAQ,CAAC,gBAA3D,IACM,GAAQ,EACV,EAAK,YAAY,CAAC,WAAY,CAAA,GAE9B,EAAK,eAAe,CAAC,YAG3B,CAEA,SAAS,EAAY,CAAM,EAGzB,GAAK,AAFW,CAAC,SAAU,YAAa,YAAa,eAAe,CAEvD,QAAQ,CAAC,IAItB,I,EAAM,EAAQ,EAAM,QAAQ,CAAC,EAAE,CACzB,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAY,EAAM,IAAI,G,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAE5B,OAAQ,GACN,IAAK,SACH,EAAM,WAAW,CAAC,EAAM,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,IAC9C,KAEF,KAAK,YACH,EAAM,QAAQ,CAAC,EAAE,CAAC,MAAM,GACxB,KAEF,KAAK,YACH,EAAM,OAAO,CAAC,SAAC,CAAf,EACE,EAAI,WAAW,CAAC,EAAI,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,GACzC,GACA,KAEF,KAAK,eACH,EAAM,OAAO,CAAC,SAAC,CAAf,EAGE,AAFiB,EAAI,KAAK,CAAC,EAAI,KAAK,CAAC,MAAM,CAAG,EAAE,CAEvC,MAAM,EACjB,GACA,KAEF,SACE,MACJ,CAEA,GAAI,AAAW,cAAX,GAA0B,AAAW,iBAAX,EAA2B,CACvD,IAAM,EAAa,CAAK,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAExC,EAAe,EAAc,EArFb,EACA,IAqFhB,EAAe,EAAc,EAtFb,EACA,GAsFlB,CAEA,GAAI,AAAW,WAAX,GAAuB,AAAW,cAAX,EAAwB,CACjD,IAAM,EAAa,EAAM,IAAI,CAAC,MAAM,CAEpC,EAAe,EAAc,EA5Fb,EACA,IA4FhB,EAAe,EAAc,EA7Fb,EACA,GA6FlB,EACF,CAtFA,EAAa,gBAAgB,CAAC,QAAS,WACrC,EAAY,SACd,GAEA,EAAa,gBAAgB,CAAC,QAAS,WACrC,EAAY,YACd,GAEA,EAAa,gBAAgB,CAAC,QAAS,WACrC,EAAY,YACd,GAEA,EAAa,gBAAgB,CAAC,QAAS,WACrC,EAAY,eACd","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["/* eslint-disable no-console */ \"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar minRowOrCol = 2;\nvar maxRowOrCol = 10;\nvar table = document.querySelector(\".field\");\nvar appendRowBtn = document.querySelector(\".append-row\");\nvar removeRowBtn = document.querySelector(\".remove-row\");\nvar appendColBtn = document.querySelector(\".append-column\");\nvar removeColBtn = document.querySelector(\".remove-column\");\nappendRowBtn.addEventListener(\"click\", function() {\n    manageTable(\"addRow\");\n});\nremoveRowBtn.addEventListener(\"click\", function() {\n    manageTable(\"removeRow\");\n});\nappendColBtn.addEventListener(\"click\", function() {\n    manageTable(\"addColumn\");\n});\nremoveColBtn.addEventListener(\"click\", function() {\n    manageTable(\"removeColumn\");\n});\nfunction toggleDisabled(elem, curr, min, max) {\n    var elemClass = elem.className;\n    if (elemClass.includes(\"append-row\") || elemClass.includes(\"append-column\")) {\n        if (curr >= max) elem.setAttribute(\"disabled\", true);\n        else elem.removeAttribute(\"disabled\");\n    }\n    if (elemClass.includes(\"remove-row\") || elemClass.includes(\"remove-column\")) {\n        if (curr <= min) elem.setAttribute(\"disabled\", true);\n        else elem.removeAttribute(\"disabled\");\n    }\n}\nfunction manageTable(action) {\n    var actions = [\n        \"addRow\",\n        \"removeRow\",\n        \"addColumn\",\n        \"removeColumn\"\n    ];\n    if (!actions.includes(action)) return;\n    var tbody = table.children[0];\n    var tRows = _to_consumable_array(tbody.rows);\n    switch(action){\n        case \"addRow\":\n            tbody.appendChild(tbody.children[0].cloneNode(true));\n            break;\n        case \"removeRow\":\n            tbody.children[0].remove();\n            break;\n        case \"addColumn\":\n            tRows.forEach(function(row) {\n                row.appendChild(row.cells[0].cloneNode(true));\n            });\n            break;\n        case \"removeColumn\":\n            tRows.forEach(function(row) {\n                var lastCell = row.cells[row.cells.length - 1];\n                lastCell.remove();\n            });\n            break;\n        default:\n            return;\n    }\n    if (action === \"addColumn\" || action === \"removeColumn\") {\n        var colsAmount = tRows[0].cells.length;\n        toggleDisabled(appendColBtn, colsAmount, minRowOrCol, maxRowOrCol);\n        toggleDisabled(removeColBtn, colsAmount, minRowOrCol, maxRowOrCol);\n    }\n    if (action === \"addRow\" || action === \"removeRow\") {\n        var rowsAmount = tbody.rows.length;\n        toggleDisabled(removeRowBtn, rowsAmount, minRowOrCol, maxRowOrCol);\n        toggleDisabled(appendRowBtn, rowsAmount, minRowOrCol, maxRowOrCol);\n    }\n}\n\n//# sourceMappingURL=index.da4b2df1.js.map\n","/* eslint-disable no-console */\n'use strict';\n\nconst minRowOrCol = 2;\nconst maxRowOrCol = 10;\n\nconst table = document.querySelector('.field');\nconst appendRowBtn = document.querySelector('.append-row');\nconst removeRowBtn = document.querySelector('.remove-row');\nconst appendColBtn = document.querySelector('.append-column');\nconst removeColBtn = document.querySelector('.remove-column');\n\nappendRowBtn.addEventListener('click', () => {\n  manageTable('addRow');\n});\n\nremoveRowBtn.addEventListener('click', () => {\n  manageTable('removeRow');\n});\n\nappendColBtn.addEventListener('click', () => {\n  manageTable('addColumn');\n});\n\nremoveColBtn.addEventListener('click', () => {\n  manageTable('removeColumn');\n});\n\nfunction toggleDisabled(elem, curr, min, max) {\n  const elemClass = elem.className;\n\n  if (elemClass.includes('append-row') || elemClass.includes('append-column')) {\n    if (curr >= max) {\n      elem.setAttribute('disabled', true);\n    } else {\n      elem.removeAttribute('disabled');\n    }\n  }\n\n  if (elemClass.includes('remove-row') || elemClass.includes('remove-column')) {\n    if (curr <= min) {\n      elem.setAttribute('disabled', true);\n    } else {\n      elem.removeAttribute('disabled');\n    }\n  }\n}\n\nfunction manageTable(action) {\n  const actions = ['addRow', 'removeRow', 'addColumn', 'removeColumn'];\n\n  if (!actions.includes(action)) {\n    return;\n  }\n\n  const tbody = table.children[0];\n  const tRows = [...tbody.rows];\n\n  switch (action) {\n    case 'addRow':\n      tbody.appendChild(tbody.children[0].cloneNode(true));\n      break;\n\n    case 'removeRow':\n      tbody.children[0].remove();\n      break;\n\n    case 'addColumn':\n      tRows.forEach((row) => {\n        row.appendChild(row.cells[0].cloneNode(true));\n      });\n      break;\n\n    case 'removeColumn':\n      tRows.forEach((row) => {\n        const lastCell = row.cells[row.cells.length - 1];\n\n        lastCell.remove();\n      });\n      break;\n\n    default:\n      return;\n  }\n\n  if (action === 'addColumn' || action === 'removeColumn') {\n    const colsAmount = tRows[0].cells.length;\n\n    toggleDisabled(appendColBtn, colsAmount, minRowOrCol, maxRowOrCol);\n    toggleDisabled(removeColBtn, colsAmount, minRowOrCol, maxRowOrCol);\n  }\n\n  if (action === 'addRow' || action === 'removeRow') {\n    const rowsAmount = tbody.rows.length;\n\n    toggleDisabled(removeRowBtn, rowsAmount, minRowOrCol, maxRowOrCol);\n    toggleDisabled(appendRowBtn, rowsAmount, minRowOrCol, maxRowOrCol);\n  }\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","table","document","querySelector","appendRowBtn","removeRowBtn","appendColBtn","removeColBtn","toggleDisabled","elem","curr","min","max","elemClass","className","includes","setAttribute","removeAttribute","manageTable","action","actions","tbody","children","tRows","_array_without_holes","isArray","rows","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","appendChild","cloneNode","remove","forEach","row","cells","lastCell","colsAmount","rowsAmount","addEventListener"],"version":3,"file":"index.da4b2df1.js.map"}